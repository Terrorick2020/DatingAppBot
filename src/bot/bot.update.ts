import { Action, Command, Ctx, Update } from 'nestjs-telegraf'
import fetch from 'node-fetch'
import { Context } from 'telegraf'
import { BotService } from './bot.service'
import { UnreadNotificationsService } from './unread-notifications.service'

@Update()
export class BotUpdate {
	constructor(
		private readonly botService: BotService,
		private readonly unreadNotificationsService: UnreadNotificationsService
	) {}

	@Command('start')
	async onStart(@Ctx() ctx: Context) {
		await this.botService.start(ctx)
	}

	@Action('support')
	async onSupport(@Ctx() ctx: Context) {
		try {
			await this.botService.showSupportMenu(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Action('support_ask')
	async onSupportAsk(@Ctx() ctx: any) {
		try {
			await ctx.answerCbQuery()
			await ctx.reply('‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –ø–µ—Ä–µ–¥–∞–º –µ—ë –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.')
			ctx.session = ctx.session || {}
			ctx.session.waitingSupportText = true
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–æ–ø—Ä–æ—Å—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Command('cancel')
	async onCancel(@Ctx() ctx: any) {
		ctx.session = ctx.session || {}
		ctx.session.waitingSupportText = false
		await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.')
	}

	@Action('back_to_main')
	async onBackToMain(@Ctx() ctx: Context) {
		try {
			await this.botService.backToMain(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Action(/^faq_(.+)$/)
	async onFaqQuestion(@Ctx() ctx: Context) {
		try {
			const match = (ctx as any).match
			if (match && match[1]) {
				const faqId = match[1]
				await this.botService.showFaqAnswer(ctx, faqId)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç–≤–µ—Ç–∞ FAQ:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Command('send_notifications')
	async onSendNotifications(@Ctx() ctx: Context) {
		try {
			await ctx.reply(
				'üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...'
			)
			await this.unreadNotificationsService.sendManualNotification()
			await ctx.reply('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')
		} catch (error: any) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
		}
	}

	// –ó–∞—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Å–æ–∑–¥–∞—Å—Ç –∂–∞–ª–æ–±—É SUPPORT)
	@Action('text')
	async onAnyText(@Ctx() ctx: any) {
		try {
			if (ctx?.session?.waitingSupportText && ctx.message?.text) {
				const text = ctx.message.text
				const telegramId = ctx.from?.id?.toString()
				const apiUrl = process.env.API_URL || ''
				if (!apiUrl) {
					await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
					return
				}
				await fetch(`${apiUrl}/complaints`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						fromUserId: telegramId,
						type: 'support, question',
						description: text,
					}),
				})
				ctx.session.waitingSupportText = false
				await ctx.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–∞–ø–ø–æ—Ä—Ç:', error)
			await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	}
}
