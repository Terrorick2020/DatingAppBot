import { Injectable } from '@nestjs/common'
import { InjectBot } from 'nestjs-telegraf'
import { Telegraf } from 'telegraf'
import { Context } from 'telegraf/typings/context'
import { faqData, previewText } from '../constant/content'

@Injectable()
export class BotService {
	constructor(@InjectBot() private readonly bot: Telegraf<Context>) {}

	async start(ctx: Context) {
		const inlineKeyboard = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üëâ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ',
							web_app: {
								url: process.env.CLIENT_URL ?? '',
							},
						},
					],
					[
						{
							text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
							callback_data: 'support',
						},
					],
				],
			},
		}

		await ctx.reply(previewText, inlineKeyboard)
	}

	async showSupportMenu(ctx: Context) {
		const questions = faqData.map((item, index) => ({
			text: `${index + 1}. ${item.question}`,
			callback_data: `faq_${item.id}`,
		}))

		// –†–∞–∑–±–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 2 –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const keyboard = []
		for (let i = 0; i < questions.length; i += 2) {
			const row = questions.slice(i, i + 2)
			keyboard.push(row)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å" –∏ "–ù–∞–∑–∞–¥"
		keyboard.push([
			{
				text: '‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å',
				callback_data: 'support_ask',
			},
			{
				text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
				callback_data: 'back_to_main',
			},
		])

		await ctx.editMessageText(
			'‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:',
			{
				reply_markup: {
					inline_keyboard: keyboard,
				},
			}
		)
	}

	async showFaqAnswer(ctx: Context, faqId: string) {
		const faq = faqData.find(item => item.id === faqId)
		
		if (!faq) {
			await ctx.answerCbQuery('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		const keyboard = {
			inline_keyboard: [
				[
					{
						text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤',
						callback_data: 'support',
					},
				],
				[
					{
						text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
						callback_data: 'back_to_main',
					},
				],
			],
		}

		await ctx.editMessageText(
			`‚ùì ${faq.question}\n\nüí¨ ${faq.answer}`,
			{
				reply_markup: keyboard,
			}
		)
	}

	async backToMain(ctx: Context) {
		const inlineKeyboard = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üëâ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ',
							web_app: {
								url: process.env.CLIENT_URL ?? '',
							},
						},
					],
					[
						{
							text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
							callback_data: 'support',
						},
					],
				],
			},
		}

		await ctx.editMessageText(previewText, inlineKeyboard)
	}

	async notifyUser(telegramId: number | string, text: string) {
		try {
			await this.bot.telegram.sendMessage(telegramId, text)
		} catch (error) {
			console.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`,
				error
			)
		}
	}

	async handlePsychologistRegistration(ctx: Context, code: string) {
		try {
			const telegramId = ctx.from?.id?.toString()
			if (!telegramId) {
				await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞
			const apiUrl = process.env.API_URL || ''
			if (!apiUrl) {
				await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
			const validateResponse = await fetch(`${apiUrl}/psychologists/validate-invite-code`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ code }),
			})

			const validateResult = await validateResponse.json()
			
			if (!validateResult.success || !validateResult.data.isValid) {
				await ctx.reply(
					`‚ùå –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${validateResult.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
				)
				return
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			await ctx.reply(
				`üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n\n` +
				`–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:\n\n` +
				`üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
				`–ò–º—è: [–í–∞—à–µ –∏–º—è]\n` +
				`–û–ø–∏—Å–∞–Ω–∏–µ: [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ]`
			)

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∞
			;(ctx as any).session = (ctx as any).session || {}
			;(ctx as any).session.waitingPsychologistData = true
			;(ctx as any).session.inviteCode = code

		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	}
}
