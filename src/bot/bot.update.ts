import { Action, Command, Ctx, On, Update } from 'nestjs-telegraf'
import fetch from 'node-fetch'
import { Context } from 'telegraf'
import { BotService } from './bot.service'
import { UnreadNotificationsService } from './unread-notifications.service'

@Update()
export class BotUpdate {
	constructor(
		private readonly botService: BotService,
		private readonly unreadNotificationsService: UnreadNotificationsService
	) {}

	@Command('start')
	async onStart(@Ctx() ctx: Context) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–º–∞–Ω–¥–µ start
		const messageText = (ctx.message as any)?.text || ''
		const startParam = messageText.split(' ')[1]
		
		console.log('üîç Bot: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', startParam)
		
		if (startParam?.startsWith('psychologist_')) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
			const code = startParam.replace('psychologist_', '')
			console.log('üîç Bot: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å –∫–æ–¥–æ–º:', code)
			await this.botService.handlePsychologistRegistration(ctx, code)
		} else if (startParam?.startsWith('ref_')) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
			const encodedParams = startParam.replace('ref_', '')
			console.log('üîç Bot: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', encodedParams)
			await this.botService.handleReferralLink(ctx, encodedParams)
		} else if (startParam) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ startapp –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–¥–ª—è Web App)
			console.log('üîç Bot: –û–±—Ä–∞–±–æ—Ç–∫–∞ startapp –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', startParam)
			await this.botService.handleStartAppParam(ctx, startParam)
		} else {
			// –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			console.log('üîç Bot: –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
			await this.botService.start(ctx)
		}
	}

	@Action('support')
	async onSupport(@Ctx() ctx: Context) {
		try {
			await this.botService.showSupportMenu(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Action('support_ask')
	async onSupportAsk(@Ctx() ctx: any) {
		try {
			await ctx.answerCbQuery()
			await ctx.reply('‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –ø–µ—Ä–µ–¥–∞–º –µ—ë –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.')
			;(ctx as any).session = (ctx as any).session || {}
			;(ctx as any).session.waitingSupportText = true
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–æ–ø—Ä–æ—Å—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Command('cancel')
	async onCancel(@Ctx() ctx: any) {
		;(ctx as any).session = (ctx as any).session || {}
		;(ctx as any).session.waitingSupportText = false
		await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.')
	}

	@Action('back_to_main')
	async onBackToMain(@Ctx() ctx: Context) {
		try {
			await this.botService.backToMain(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Action('psychologist_form')
	async onPsychologistForm(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			await ctx.reply(
				`üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n` +
				`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
				`–ò–º—è: [–í–∞—à–µ –∏–º—è]\n` +
				`–û–ø–∏—Å–∞–Ω–∏–µ: [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ]`
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ä–º—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∞:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Action(/^faq_(.+)$/)
	async onFaqQuestion(@Ctx() ctx: Context) {
		try {
			const match = (ctx as any).match
			if (match && match[1]) {
				const faqId = match[1]
				await this.botService.showFaqAnswer(ctx, faqId)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç–≤–µ—Ç–∞ FAQ:', error)
			await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
		}
	}

	@Command('send_notifications')
	async onSendNotifications(@Ctx() ctx: Context) {
		try {
			await ctx.reply(
				'üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...'
			)
			await this.unreadNotificationsService.sendManualNotification()
			await ctx.reply('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')
		} catch (error: any) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
		}
	}

	// –ó–∞—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Å–æ–∑–¥–∞—Å—Ç –∂–∞–ª–æ–±—É SUPPORT)
	@Action('text')
	async onAnyText(@Ctx() ctx: any) {
		try {
			if ((ctx as any)?.session?.waitingSupportText && (ctx.message as any)?.text) {
				const text = (ctx.message as any).text
				const telegramId = ctx.from?.id?.toString()
				const apiUrl = process.env.API_URL || ''
				if (!apiUrl) {
					await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
					return
				}
				await fetch(`${apiUrl}/complaints`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						fromUserId: telegramId,
						type: 'support, question',
						description: text,
					}),
				})
				;(ctx as any).session.waitingSupportText = false
				await ctx.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–∞–ø–ø–æ—Ä—Ç:', error)
			await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	}

	// –ó–∞—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
	@On('text')
	async onText(@Ctx() ctx: any) {
		try {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
			if ((ctx as any)?.session?.waitingPsychologistData && (ctx.message as any)?.text) {
				const text = (ctx.message as any).text
				const telegramId = ctx.from?.id?.toString()
				const apiUrl = process.env.API_URL || ''
				
				if (!apiUrl) {
					await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
					return
				}

				// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
				const nameMatch = text.match(/–ò–º—è:\s*(.+)/i)
				const descriptionMatch = text.match(/–û–ø–∏—Å–∞–Ω–∏–µ:\s*(.+)/i)

				if (!nameMatch || !descriptionMatch) {
					await ctx.reply(
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n' +
						'–ò–º—è: [–í–∞—à–µ –∏–º—è]\n' +
						'–û–ø–∏—Å–∞–Ω–∏–µ: [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ]'
					)
					return
				}

				const name = nameMatch[1].trim()
				const about = descriptionMatch[1].trim()

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
				const response = await fetch(`${apiUrl}/psychologists/register-by-invite`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						code: (ctx as any).session.inviteCode,
						telegramId,
						name,
						about,
					}),
				})

				const result = await response.json()

				if (result.success) {
					;(ctx as any).session.waitingPsychologistData = false
					;(ctx as any).session.inviteCode = null
					await ctx.reply(
						'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥.\n\n' +
						'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
						'‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö\n' +
						'‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
						'‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º\n\n' +
						'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üöÄ'
					)
				} else {
					await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
				}
				return
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
			if ((ctx as any)?.session?.waitingSupportText && (ctx.message as any)?.text) {
				const text = (ctx.message as any).text
				const telegramId = ctx.from?.id?.toString()
				const apiUrl = process.env.API_URL || ''
				if (!apiUrl) {
					await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
					return
				}
				await fetch(`${apiUrl}/complaints`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						fromUserId: telegramId,
						type: 'support, question',
						description: text,
					}),
				})
				;(ctx as any).session.waitingSupportText = false
				await ctx.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	}
}
