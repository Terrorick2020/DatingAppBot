import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import * as cron from 'node-cron'
import { BotService } from './bot.service'
import { RedisPubSubService } from './redis-pub-sub.service'

@Injectable()
export class UnreadNotificationsService
	implements OnModuleInit, OnModuleDestroy
{
	private readonly CONTEXT = 'UnreadNotificationsService'
	private notificationTask: cron.ScheduledTask | null = null

	constructor(
		private readonly configService: ConfigService,
		private readonly botService: BotService,
		private readonly redisPubSubService: RedisPubSubService
	) {}

	async onModuleInit() {
		// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ (–≤ 00:00, 03:00, 06:00, 09:00, 12:00, 15:00, 18:00, 21:00)
		this.notificationTask = cron.schedule('0 */3 * * *', async () => {
			try {
				await this.sendUnreadNotifications()
			} catch (error: any) {
				console.error(
					'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:',
					error?.stack || error
				)
			}
		})

		console.log(
			'–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
			this.CONTEXT
		)
	}

	onModuleDestroy() {
		if (this.notificationTask) {
			this.notificationTask.stop()
			console.log(
				'–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
				this.CONTEXT
			)
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
	 */
	async sendUnreadNotifications(): Promise<void> {
		try {
			console.log(
				'–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö',
				this.CONTEXT
			)

			// –ü–æ–ª—É—á–∞–µ–º API URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
			const apiUrl = this.configService.get<string>('API_URL')
			if (!apiUrl) {
				console.error('API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', this.CONTEXT)
				return
			}

			// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
			const response = await fetch(`${apiUrl}/chats/users-with-unread`)

			if (!response.ok) {
				console.error(
					`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: ${response.status} ${response.statusText}`,
					this.CONTEXT
				)
				return
			}

			const result = await response.json()

			if (!result.success || !result.data) {
				console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API', this.CONTEXT, { result })
				return
			}

			const usersWithUnread: { telegramId: string; unreadCount: number }[] =
				result.data

			console.log(
				`–ù–∞–π–¥–µ–Ω–æ ${usersWithUnread.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏`,
				this.CONTEXT
			)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			for (const user of usersWithUnread) {
				try {
					const message = this.formatUnreadMessage(user.unreadCount)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Redis Pub/Sub
					await this.redisPubSubService.publishBotNotify({
						telegramId: user.telegramId,
						text: message,
					})

					console.log(
						`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId} (${user.unreadCount} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö)`,
						this.CONTEXT
					)

					// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
					await new Promise(resolve => setTimeout(resolve, 100))
				} catch (error: any) {
					console.error(
						`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
						error?.stack || error,
						this.CONTEXT
					)
				}
			}

			console.log(
				`–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersWithUnread.length}`,
				this.CONTEXT
			)
		} catch (error: any) {
			console.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:',
				error?.stack || error,
				this.CONTEXT
			)
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
	 */
	private formatUnreadMessage(unreadCount: number): string {
		if (unreadCount === 1) {
			return 'üí¨ –£ –≤–∞—Å –µ—Å—Ç—å 1 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —á–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ.'
		} else if (unreadCount >= 2 && unreadCount <= 4) {
			return `üí¨ –£ –≤–∞—Å –µ—Å—Ç—å ${unreadCount} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —á–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ.`
		} else {
			return `üí¨ –£ –≤–∞—Å –µ—Å—Ç—å ${unreadCount} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —á–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ.`
		}
	}

	/**
	 * –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
	 */
	async sendManualNotification(): Promise<void> {
		console.log('–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', this.CONTEXT)
		await this.sendUnreadNotifications()
	}
}
